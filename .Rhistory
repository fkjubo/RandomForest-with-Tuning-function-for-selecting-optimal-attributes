data <- read.csv("Cardiotocographic.csv", TRUE, ",")
data <- read.csv("Cardiotocographic.csv", TRUE, ",")
library(readxl)
Cardiotocographic <- read_excel("~/google+/Cardiotocographic.csv")
View(Cardiotocographic)
data <- read.csv("Cardiotocographic.csv", TRUE, ",")
data <- read.csv("Cardiotocographic.csv", TRUE, ",")
getwd()
data <- read.csv("Cardiotocographic.csv", TRUE, ",")
str(data)
data$NSP <- as.factor(data$NSP)
str(data)
library(caTools)
set.seed(123)
split <- sample.split(data$NSP, SplitRatio = .75)
train <- subset(data, split == T)
test <- subset(data, split == F)
install.packages("randomForest")
library(randomForest)
model <- randomForest(NSP~., data= train)
print(model)
attributes(model)
model$confusion
model$confusion
model$predicted
install.packages("caret")
library(caret)
p1 <- predict(model, train)
confusionMatrix(p1, data$NSP)
confusionMatrix(p1, train$NSP)
install.packages("e1071")
library(e1071)
confusionMatrix(p1, train$NSP)
p2 <- predict(model, test)
confusionMatrix(p2, test$NSP)
plot(model)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = 1,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .8,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
model
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .02,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = 1,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .5,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .8,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .5,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .6,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .7,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
model <- randomForest(NSP~., data= train,
ntree= 320,
mtry= 6,
importance= T,
proximity= T)
print(model)
p1 <- predict(model, train)
confusionMatrix(p1, train$NSP)
p2 <- predict(model, test)
confusionMatrix(p2, test$NSP)
plot(model)
nodes <- hist(treesize(model),
main = "No. of nodes",
col = "blue")
varImpPlot(model)
varImpPlot(model,
sort = T,
n.var = 10)
importance(model)
varUsed(model)
MDSplot(model, train$NSP)
MDSplot(model, test$NSP)
print(model)
attributes(model)
confusionMatrix(p1, train$NSP)
library(caret)
library(e1071)
confusionMatrix(p1, train$NSP)
confusionMatrix(p2, test$NSP)
plot(model)
plot(model)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .7,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
nodes <- hist(treesize(model),
main = "No. of nodes",
col = "blue")
library(randomForest)
print(model)
attributes(model)
confusionMatrix(p1, train$NSP)
library(caret)
library(e1071)
confusionMatrix(p1, train$NSP)
confusionMatrix(p2, test$NSP)
plot(model)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .7,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
nodes <- hist(treesize(model),
main = "No. of nodes",
col = "blue")
varImpPlot(model,
sort = T,
n.var = 10)
varUsed(model)
varUsed(model)
tune <- tuneRF(train[,-22], train[,22],
stepFactor = .7,
improve = .05,
plot = T,
ntreeTry = 320,
trace = T)
confusionMatrix(p2, test$NSP)
model <- randomForest(NSP~., data= train,
ntree= 320,
mtry= 9,
importance= T,
proximity= T)
p1 <- predict(model, train)
confusionMatrix(p1, train$NSP)
p2 <- predict(model, test)
confusionMatrix(p2, test$NSP)
nodes <- hist(treesize(model),
main = "No. of nodes",
col = "blue")
varImpPlot(model,
sort = T,
n.var = 10)
